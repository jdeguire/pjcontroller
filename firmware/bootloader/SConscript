
# Hey Emacs, this is a -*- python -*- file
#
# Copyright 2011-2013 Jesse DeGuire
#
# This file is part of Projector Controller.
#
# Projector Controller is free software: you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Projector Controller is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Projector Controller.  If not, see <http://www.gnu.org/licenses/>.
#
# File:   SCconscript
# Author: Jesse DeGuire
#
# Contains build options and directions for the bootloader.  This is referenced from the SConstruct
# script in the above directory when the SCons build system is run.
#

import os

Import(['env', 'commonpath'])

#---------------
# Bootloader-specific project options
#---------------
outputname = 'pjc-bootloader'      # output file name (without extensions)
imagename  = 'pjc-flash-image'     # name of file to read flash into (no extension)

icspdevice = 'usbtiny'             # name of programming device for avrdude 
avr_prog   = 'avrdude'             # name of programming utility

# fuses and lock bits
# be sure your settings are correct before changing these (search online for "AVR fuse calculator")
# note that avrdude reads unused bits back as 0
lfuse = '0xF7'           # external full-swing crystal and longest startup time
hfuse = '0xD8'           # defaults except use boot reset vector
efuse = '0x04'           # brown-out detection enabled at 4.3V
lockbits = '0x3F'        # defaults (no lock features enabled)

# source files to build
commonfiles = ['uart.c', 'sharedmem.c', 'watchdog.c', 'cmd.c']
bootfiles   = Glob('*.c')          # everything in 'bootloader/'

# linker script (leave empty to use the default script chosen by avr-libc)
ldscript = 'bootloader' + os.sep + 'pjcbootloader.x'

# additional compiler options for just the bootloader
copts   = ['-mcall-prologues', '-ffunction-sections']

# linker options for just the bootloader
lopts = ['-gc-sections']

#---------------
# End of bootloader options
#---------------



# full file names ("something.hex")
outputfile = outputname + env['HEXSUFFIX']
imagefile  = imagename + env['HEXSUFFIX']

# Generate file paths needed for below
ourdir  = env.Dir('.').path        # where we are now relative to top SConstruct file
elffile = ourdir + os.sep + outputname + env['PROGSUFFIX']
hexfile = ourdir + os.sep + outputfile

# an action to create the hex file using objcopy
boothex_act = Action(env['OBJCOPY'] + ' -O ihex -R .eeprom \"' + elffile  + '\" \"' + hexfile + '\"')

# a string forming a base avrdude command that we can just add on to in the targets
prog_base = avr_prog + ' -p ' + env['MCU'] + ' -B0.4 -c ' + icspdevice


# Create a clone of the base environment we can set up just for the bootloader
bootenv = env.Clone()
bootenv.Append(CCFLAGS = copts)
bootenv.Append(LINKFLAGS = lopts)

# We have to explicitly use the Object builder on stuff in 'common/' or else the object files will
# get dumped into 'common/' instead of our output directory
common_objs = []
for f in commonfiles:
    base, ext = os.path.splitext(os.path.basename(f))
    common_objs.append(bootenv.Object(target = base + bootenv['OBJSUFFIX'], source = commonpath + f))


# target to build the bootloader
# paths and files in these commands are relative to the directory of this script
bb = bootenv.Program(outputname, bootfiles + common_objs)
bootenv.Alias('build-bootloader', bb)
bootenv.AddPostAction(bb, boothex_act)
bootenv.Clean(bb, outputfile)

if ldscript != '':
    bootenv.Append(LINKFLAGS = ['-T' + ldscript])
    bootenv.Depends(bb, '#'+ldscript)

# Note to self:  env.Command(target, [sources], cmd_string)
# We can pass in a dummy file for 'target' if the command doesn't generate an output
# We can also pass in an empty list "[]" if the command doesn't accept input files

# target to write the bootloader to the AVR using avrdude
wb = bootenv.Command('wb.dummy', outputfile, prog_base + ' -U flash:w:\"$SOURCE\":i')
bootenv.Alias('write-bootloader', wb)
bootenv.AlwaysBuild(wb)

# target to read the AVR's flash memory into an output hex file
rf = bootenv.Command(imagefile, [], prog_base + ' -U flash:r:\"$TARGET\":i')
bootenv.Alias('read-flash', rf)
bootenv.AlwaysBuild(rf)

# target to erase everything--flash, EEPROM, and lock bits (but not fuse bits)
ed = bootenv.Command('ed.dummy', [], prog_base + ' -e')
bootenv.Alias('erase-device', ed)
bootenv.AlwaysBuild(ed)

# target to write the AVR fuses and lock bits
wu = bootenv.Command('wu.dummy', [], prog_base + ' -U lfuse:w:' + lfuse + ':m -U hfuse:w:' + hfuse + 
                    ':m -U efuse:w:' + efuse + ':m -U lock:w:' + lockbits + ':m')
bootenv.Alias('write-fuses', wu)
bootenv.AlwaysBuild(wu)

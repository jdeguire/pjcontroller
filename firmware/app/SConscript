# Hey Emacs, this is a -*- python -*- file
#
# Copyright Â© 2011-2013 Jesse DeGuire
#
# This file is part of Projector Controller.
#
# Projector Controller is free software: you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Projector Controller is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Projector Controller.  If not, see <http://www.gnu.org/licenses/>.
#
# File:   SCconscript
# Author: Jesse DeGuire
#
# Contains build options and directions for the application.  This is referenced from the SConstruct
# script in the above directory when the SCons build system is run.
#

import os

Import(['env', 'commonpath'])

#---------------
# Application-specific project options
#---------------
outputname = 'pjc-app'             # output file name (without extensions)

# source files to build
commonfiles = ['uart.c', 'sharedmem.c', 'watchdog.c', 'cmd.c']
appfiles   = Glob('*.c')          # everything in 'app/'

# linker script (leave empty to use the default script chosen by avr-libc)
ldscript = 'app' + os.sep + 'pjcapp.x'

# additional compiler options for just the bootloader
copts   = []

# linker options for just the bootloader
lopts = []

#---------------
# End of application options
#---------------


# full file name ("something.hex")
outputfile = outputname + env['HEXSUFFIX']

# Generate file paths needed for below
ourdir  = env.Dir('.').path        # where we are now relative to top SConstruct file
elffile = ourdir + os.sep + outputname + env['PROGSUFFIX']
hexfile = ourdir + os.sep + outputfile

# an action to create the hex file using objcopy
apphex_act = Action(env['OBJCOPY'] + ' -O ihex -R .eeprom \"' + elffile  + '\" \"' + hexfile + '\"')

# Create a clone of the base environment we can set up just for the application
appenv = env.Clone()
appenv.Append(CCFLAGS = copts)
appenv.Append(LINKFLAGS = lopts)

# We have to explicitly use the Object builder on stuff in 'common/' or else the object files will
# get dumped into 'common/' instead of our output directory
common_objs = []
for f in commonfiles:
    base, ext = os.path.splitext(os.path.basename(f))
    common_objs.append(appenv.Object(target = base + appenv['OBJSUFFIX'], source = commonpath + f))


# target to build the application
# paths and files in these commands are relative to the directory of this script
ba = appenv.Program(outputname, appfiles + common_objs)
appenv.Alias('build-app', ba)
appenv.AddPostAction(ba, apphex_act)
appenv.Clean(ba, outputfile)

if ldscript != '':
    appenv.Append(LINKFLAGS = ['-T' + ldscript])
    appenv.Depends(ba, '#'+ldscript)

# Note to self:  env.Command(target, [sources], cmd_string)
# We can pass in a dummy file for 'target' if the command doesn't generate an output
# We can also pass in an empty list "[]" if the command doesn't accept input files

#
# TODO:  Add builder to write app to flash using bootloader
#
